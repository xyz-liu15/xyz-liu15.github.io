[{"categories":["draft"],"content":"‚ú® Cherry Studio: An All-in-One Desktop Assistant That Changes How You Interact with AI ‚ú® ‚Äî‚Äî Making AI truly work for you, not drowning you in AI üåü Why Do You Need Cherry Studio? As a blogger who has long been following AI tools, I‚Äôve tested countless AI applications‚Äîfrom cloud services to local deployments, from general chat to vertical domain tools. But Cherry Studio is one of the few works that caught my eye. It solves three core pain points in the AI era: Choice paralysis: No need to switch between 10 browser tabs for different AI services Efficiency bottleneck: Pre-configured with 300+ professional assistants, say goodbye to repeatedly writing prompts Privacy anxiety: Perfect balance between cloud convenience and local privacy needs üõ†Ô∏è In-Depth Experience of Features 1. ‚ÄúAI Model United Nations‚Äù ‚Äî‚Äî One-Stop Management of All LLMs Imagine: ChatGPT-4 on the left helping you write code Claude 3 on the right analyzing documents Locally running Llama 3 at the bottom processing sensitive data Cherry Studio‚Äôs multi-window synchronized conversation feature allowed me to truly achieve AI model collaborative work for the first time. Especially suitable for scenarios where you need to compare outputs from different models. 2. Knowledge Base Function ‚Äî‚Äî Building Your ‚ÄúSecond Brain‚Äù Last week when I was researching Web3 technology: Dragged in 10 PDF whitepapers + 3 bookmark links AI automatically established knowledge associations When asking questions, answers were prioritized based on these materials The results were at least 50% more accurate than using ChatGPT alone! This is a game-changer for researchers. 3. Those Details That Made Me Exclaim ‚ÄúIt Really Gets Me‚Äù Automatic Mermaid Chart Generation: Turning boring requirement documents into flowcharts Global Hotkeys: Summon the AI window anytime (just like Mac‚Äôs Spotlight) CSS Customization: I changed the interface to a cyberpunk style üíú üéØ Who Is It For? Real Usage Scenarios User Type My Tested Case Efficiency Improvement Content Creators Used the ‚ÄúViral Title Generator‚Äù assistant, completed a week‚Äôs worth of topics in 1 hour ‚è±Ô∏è Saves 4 hours/week Programmers Simultaneously asked code questions to ChatGPT and local models for cross-validation üêõ Debugging time cut in half Academics Fed course PPTs to the knowledge base, generated smart Q\u0026A cards üìö Review efficiency improved 3x ‚ö° Quick Start Guide for Beginners Download and Install (3 minutes): # For Mac as an example brew install --cask cherry-studio Basic Configuration: Cloud Models: Enter API keys (as simple as configuring a VSCode plugin) Local Models: Automatically detects Ollama installation The First Magic Moment: Try the built-in ‚ÄúXiaohongshu Copywriting Generator‚Äù assistant, input: ‚ÄúRecommend a sunscreen, in a playful style‚Äù üí° My Advanced Usage Tips Combo Technique: Knowledge Base + Claude = Paper Reading Superpower Hidden Trick: Use @filename to directly query specific document content Advanced Usage: Connect to private models via MCP protocol üîÆ Future Expectations The development team has revealed upcoming features: Browser plugin version (no need to switch windows for research!) Mobile APP (Android/iOS) Plugin marketplace (community-shared AI assistants) üìå Final Thoughts In today‚Äôs flood of AI tools, Cherry Studio has remarkably achieved: ‚úÖ Simplicity without sacrificing flexibility ‚úÖ Cloud collaboration without compromising privacy ‚úÖ Professional features without barriers to entry If you use AI for more than 1 hour daily, this might be the most worthwhile efficiency tool to invest in for 2024. üëâ Download and experience now (P.S. Completely open-source and free, but if you like it, remember to go to GitHub and give it a üåü to support the developers~) ","date":"2025-05-03","objectID":"/en/posts/43d1d25/:0:0","tags":["draft"],"title":"ÂÖ®ËÉΩÊ°åÈù¢Âä©ÊâãÔºöCherry Studio","uri":"/en/posts/43d1d25/"},{"categories":["Programming"],"content":"uv is an emerging Python package manager developed by Astral, designed to replace pip and virtualenv, offering faster dependency resolution and installation speeds.","date":"2025-05-03","objectID":"/en/posts/4b5bcb5/","tags":["Python","Tools","Tutorial"],"title":"Comprehensive Guide to Python's uv Library","uri":"/en/posts/4b5bcb5/"},{"categories":["Programming"],"content":"Comprehensive Guide to Python‚Äôs uv Library uv is an emerging Python package manager developed by Astral (the same company behind popular tools like Ruff and Starlette). It aims to replace pip and virtualenv, offering faster dependency resolution and installation speeds. Below, I‚Äôll provide a detailed guide on how to use uv. 1. Installing uv Installation Methods for Different Systems Windows On Windows, you can install using PowerShell: irm https://astral.sh/uv/install.ps1 | iex This command downloads and executes the installation script, automatically adding uv to your system PATH. macOS/Linux On macOS or Linux, you can install using curl: curl -LsSf https://astral.sh/uv/install.sh | sh After installation, you‚Äôll need to reload your shell or run: source ~/.bashrc # or other shell configuration file Installing with pip (Alternative Method) pip install uv Verifying Installation After installation, run the following command to verify successful installation: uv --version 2. Configuring Mirrors in China Due to network constraints, users in China may experience slow connections to the official PyPI source. You can configure domestic mirrors to accelerate downloads. Temporary Mirror Usage You can specify a mirror directly in the command: uv pip install package-name --index-url https://pypi.tuna.tsinghua.edu.cn/simple Permanent Mirror Configuration Configure a global mirror (recommended): uv config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple Common domestic mirrors in China: Tsinghua University: https://pypi.tuna.tsinghua.edu.cn/simple Alibaba Cloud: https://mirrors.aliyun.com/pypi/simple/ Douban: https://pypi.douban.com/simple/ USTC: https://pypi.mirrors.ustc.edu.cn/simple/ Viewing Current Configuration uv config list 3. Project Initialization Creating a New Project uv init my_project cd my_project This creates a Python project directory with a basic structure. Initializing an Existing Project In an existing project directory: uv init This creates necessary configuration files in the current directory. 4. Virtual Environment Configuration uv has built-in virtual environment management functionality that‚Äôs more efficient than traditional virtualenv. Creating a Virtual Environment uv venv .venv This creates a virtual environment directory named .venv in the current directory. Activating the Virtual Environment Activation methods for different systems: Windows (PowerShell): .\\venv\\Scripts\\activate macOS/Linux: source .venv/bin/activate Deactivating the Virtual Environment deactivate Why Use Virtual Environments? Virtual environments isolate dependencies between different projects, preventing package version conflicts. Each project can have its own independent Python environment and dependency packages. 5. Package Management Installing Packages uv pip install package-name Installing a specific version: uv pip install package-name==1.2.3 Installing development dependencies (typically used for testing, documentation tools, etc.): uv pip install --group=dev pytest Installing from requirements.txt uv pip install -r requirements.txt Generating requirements.txt uv pip freeze \u003e requirements.txt Upgrading Packages uv pip install --upgrade package-name Uninstalling Packages uv pip uninstall package-name Viewing Installed Packages uv pip list 6. Python Version Management uv can manage multiple Python versions, similar to pyenv. Installing a Specific Python Version uv toolchain install python@3.9.0 Listing Available Python Versions uv toolchain list Setting Project Python Version In the project directory: uv toolchain use python@3.9.0 This creates a .python-version file in the project directory, recording the Python version used. Why Manage Python Versions? Different projects may require different versions of the Python interpreter. Version management tools allow you to switch easily. 7. Advanced Features Parallel Installation uv uses parallel installation by default to accelerate the process: uv pip install -r requirements.txt -","date":"2025-05-03","objectID":"/en/posts/4b5bcb5/:0:0","tags":["Python","Tools","Tutorial"],"title":"Comprehensive Guide to Python's uv Library","uri":"/en/posts/4b5bcb5/"},{"categories":["Programming Technology"],"content":"A comprehensive guide to Miniconda, including installation, configuration, environment management, and mirror settings","date":"2025-05-03","objectID":"/en/posts/8f1d8ed/","tags":["Python","Development Tools"],"title":"Miniconda Tutorial","uri":"/en/posts/8f1d8ed/"},{"categories":["Programming Technology"],"content":"Miniconda Detailed Guide Table of Contents Introduction to Miniconda Installation and Configuration Windows macOS Linux Miniconda vs Anaconda Conda Mirror Configuration Python Virtual Environment Management Package Management and Dependency Control Advanced Techniques Environment Export and Sharing Dependency Conflict Resolution Environment Migration and Cross-platform Compatibility Miniconda and CI/CD Integration Common Issues and Debugging Conclusion 1. Introduction to Miniconda Miniconda is a lightweight version of Anaconda, containing only the conda package management tool, Python, and a few core dependencies. It‚Äôs suitable for users who are sensitive to disk space or need customized environments, making it the preferred tool for managing Python virtual environments and scientific computing dependencies. 2. Installation and Configuration Windows Download the Installer https://docs.conda.io/en/latest/miniconda.html Select the Windows 64-bit version. Run the Installer Check Add Miniconda to PATH (requires administrator privileges). Restart the terminal after installation. Verify Installation conda --version macOS Download the Installer Choose macOS 64-bit (bash) or Apple Silicon (M1/M2) version. Terminal Installation bash Miniconda3-latest-MacOSX-x86_64.sh Configure PATH Edit ~/.zshrc or ~/.bash_profile, add: export PATH=\"/opt/miniconda3/bin:$PATH\" Linux Download the Installation Script wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh Execute Installation bash Miniconda3-latest-Linux-x86_64.sh Activate Environment source ~/.bashrc 3. Miniconda vs Anaconda Feature Miniconda Anaconda Installation Size ~100 MB ~3 GB Pre-installed Packages Core tools only 1500+ scientific computing packages Use Cases Custom environments, lightweight deployment Ready-to-use, rapid prototype development Flexibility High (install as needed) Low (pre-installed packages) 4. Conda Mirror Configuration Regional Mirrors (Faster Downloads) Tsinghua Mirror conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free conda config --set show_channel_urls yes Alibaba Cloud Mirror conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main/ Restore Default Source conda config --remove-key channels 5. Python Virtual Environment Management Creating and Activating Environments # Create environment (specify Python version) conda create --name myenv python=3.9 # Activate environment conda activate myenv # Windows/macOS/Linux (Shell must support) # Exit environment conda deactivate Managing Environment List # View all environments conda env list # Delete environment conda env remove --name myenv 6. Package Management and Dependency Control Installing and Uninstalling Packages # Install via conda conda install numpy pandas # Install via pip (prefer conda) pip install requests # Uninstall package conda uninstall numpy Version Control # Install specific version conda install numpy=1.21.0 # Update package conda update numpy 7. Advanced Techniques Environment Export and Sharing # Export environment configuration conda env export \u003e environment.yml # Create environment from file conda env create -f environment.yml Dependency Conflict Resolution # View conflicting packages conda list --show-channel-urls # Install in strict mode conda install --strict-channel-priority Cross-platform Environment Migration # Generate platform-independent environment file conda env export --from-history \u003e environment.yml 8. Miniconda and CI/CD Integration Example configuration in GitHub Actions: jobs: build: runs-on: ubuntu-latest steps: - uses: conda-incubator/setup-miniconda@v2 with: activate-environment: myenv environment-file: environment.yml 9. Common Issues and Debugging Conda Command Not Found Check PATH configuration (Linux/macOS requires manual addition). Restart terminal or execute source ~/.bashrc. Environment Activation Failure Confirm S","date":"2025-05-03","objectID":"/en/posts/8f1d8ed/:0:0","tags":["Python","Development Tools"],"title":"Miniconda Tutorial","uri":"/en/posts/8f1d8ed/"},{"categories":["Web Novels"],"content":"Philosophy and Thoughts ‚ÄúHe who will eventually shake the world must first remain silent for long; he who will eventually ignite lightning must first drift like a cloud.‚Äù ‚Äî‚Äî Nietzsche, Twilight of the Idols ‚ÄúEverything the state says is a lie, and everything it has it has stolen.‚Äù ‚Äî‚Äî Nietzsche ‚ÄúOnly a few people in the world can ultimately achieve their ideals.‚Äù ‚Äî‚Äî The Moon and Sixpence Literary Masterpieces ‚ÄúThe past was a lie, memory has no roads‚Ä¶ only solitude lasts.‚Äù ‚Äî‚Äî Gabriel Garc√≠a M√°rquez, One Hundred Years of Solitude ‚ÄúHope is attached to existence; where there is existence, there is hope, and where there is hope, there is light.‚Äù ‚Äî‚Äî Lu Xun ‚ÄúTo pursue one‚Äôs dream is to pursue one‚Äôs doom. On the street full of sixpences, he looked up and saw the moonlight.‚Äù ‚Äî‚Äî The Moon and Sixpence Ancient Poetry and Eastern Wisdom ‚ÄúWho says life cannot begin anew? The water before my door still flows westward! Don‚Äôt sing the yellow rooster song for white hair.‚Äù ‚Äî‚Äî Su Shi, Silk-Washing Stream ‚ÄúSpring bestows its virtues, all things glow with splendor.‚Äù ‚Äî‚Äî Song of the Long Journey Classic Quotes from Web Novels ‚ÄúAt the end of the immortal path, who stands as the peak? Upon seeing Wushi, the Dao becomes void.‚Äù ‚Äî‚Äî Shrouding the Heavens ‚ÄúMy heart holds light, though thousands of bones lie beneath my feet. Walking alone, with blood flooding the earth behind me. Even if one day I‚Äôm misunderstood, I‚Äôll still press forward!‚Äù ‚Äî‚Äî Famous quote from web novels ‚ÄúI don‚Äôt believe you know everything.‚Äù ‚Äî‚Äî Powerful rebuttal line in novels Life Reflections ‚ÄúWhen a person chooses to grow, they often also choose to be misunderstood, because you must walk the path you‚Äôve chosen, not the path others think you should choose.‚Äù ‚ÄúFace changes, accept impermanence, and let go of yourself.‚Äù ","date":"2025-05-02","objectID":"/en/posts/writing-collection/:0:0","tags":["Literature","Novels"],"title":"Collection of Literary Expressions","uri":"/en/posts/writing-collection/"},{"categories":["hello"],"content":"Welcome to Hugo FixIt! This is your very first post. Documentation Head to the documentation page linked below for a complete guidence to get started with the FixIt theme. InstallationGetting StartedContent ManagementAdvanced Usage Feedback Whether it‚Äôs questions, ideas, bugs or pull requests, all feedback is welcome! Head over to the issues or discussions tracker. ","date":"2025-05-02","objectID":"/en/posts/hello-world/:0:0","tags":["hello","FixIt"],"title":"Hello World","uri":"/en/posts/hello-world/"}]