(() => {
  // <stdin>
  var FixItBlog = class {
    /**
     * say hello
     * you can define your own functions below
     * @returns {FixItBlog}
     */
    hello() {
      console.log("custom.js: Hello FixIt!");
      return this;
    }
    /**
     * 检测当前语言并设置相应的界面元素
     * @returns {FixItBlog}
     */
    setupLanguage() {
      const path = window.location.pathname;
      const isEnglish2 = path.includes("/en/");
      const isChinese = path.includes("/zh-cn/") || !isEnglish2 && !path.includes("/");
      if (isEnglish2) {
        document.documentElement.lang = "en";
        this.translateElements("en");
      } else {
        document.documentElement.lang = "zh-CN";
        this.translateElements("zh-cn");
      }
      return this;
    }
    /**
     * 翻译页面上的特定元素
     * @param {string} lang - 语言代码 ('en' 或 'zh-cn')
     * @returns {FixItBlog}
     */
    translateElements(lang) {
      const translations = {
        "en": {
          "archives": "Archives",
          "tags": "Tags",
          "categories": "Categories",
          "search": "Search",
          "menu": "Menu",
          "home": "Home",
          "posts": "Posts",
          "ai-summary": "Article Summary"
          // 添加这一行
          // 可以根据需要添加更多翻译
        },
        "zh-cn": {
          "archives": "\u5F52\u6863",
          "tags": "\u6807\u7B7E",
          "categories": "\u5206\u7C7B",
          "search": "\u641C\u7D22",
          "menu": "\u83DC\u5355",
          "home": "\u9996\u9875",
          "posts": "\u6587\u7AE0",
          "ai-summary": "\u6587\u7AE0\u6458\u8981"
          // 添加这一行
          // 可以根据需要添加更多翻译
        }
      };
      const dict = translations[lang] || translations["zh-cn"];
      document.querySelectorAll("[data-i18n]").forEach((el) => {
        const key = el.getAttribute("data-i18n");
        if (dict[key]) {
          el.textContent = dict[key];
        }
      });
      const searchInput = document.querySelector(".search-input");
      if (searchInput && dict["search"]) {
        searchInput.placeholder = dict["search"] + "...";
      }
      const aiSummaryTitle = document.querySelector(".ai-summary-title");
      if (aiSummaryTitle && dict["ai-summary"]) {
        aiSummaryTitle.textContent = dict["ai-summary"];
      }
      return this;
    }
    /**
     * 初始化AI摘要功能
     * @returns {FixItBlog}
     */
    initAISummary() {
      setTimeout(() => {
        if (typeof window.AISummary !== "undefined") {
          const isEnglish2 = location.pathname.includes("/en/");
          window.aiConfig.aiApi = isEnglish2 ? "https://ai-summary.xyz-liu15.workers.dev" : "https://qw.geekswg.top";
          window.aiConfig.aiApi = "https://ai-summary.xyz-liu15.workers.dev";
          const selectors = ["article", ".single .content", "#content-wrapper", ".content", "main"];
          let foundSelector = false;
          for (const selector of selectors) {
            if (document.querySelector(selector)) {
              window.aiConfig.aiSelector = selector;
              foundSelector = true;
              console.log("\u627E\u5230\u6709\u6548\u9009\u62E9\u5668:", selector);
              break;
            }
          }
          if (!foundSelector) {
            console.warn("\u672A\u627E\u5230\u6709\u6548\u7684\u5185\u5BB9\u9009\u62E9\u5668\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u503C");
            window.aiConfig.aiSelector = "article";
          }
          window.aiConfig.reportUrl = "mailto:xyz.liu15@gmail.com?subject=\u6587\u7AE0\u6458\u8981\u6295\u8BC9&body=\u6295\u8BC9\u7F51\u5740\uFF1A=" + location.href;
          window.aiConfig.enableAIPathRegex = /\/posts\//;
          const pathMatches = window.aiConfig.enableAIPathRegex.test(location.pathname);
          console.log("\u5F53\u524D\u8DEF\u5F84:", location.pathname, "\u662F\u5426\u5339\u914D:", pathMatches);
          if (pathMatches) {
            const originalFetchSummary = window.AISummary.fetchSummary;
            window.AISummary.fetchSummary = function() {
              try {
                console.log("\u5F00\u59CB\u83B7\u53D6AI\u6458\u8981\uFF0C\u8BED\u8A00:", document.documentElement.lang);
                console.log("\u5185\u5BB9\u9009\u62E9\u5668:", this.config.aiSelector);
                console.log("API\u5730\u5740:", this.config.aiApi);
                const contentElement = document.querySelector(this.config.aiSelector);
                if (!contentElement) {
                  console.error("\u672A\u627E\u5230\u5185\u5BB9\u5143\u7D20:", this.config.aiSelector);
                  const summaryContent = document.getElementById("ai-summary-content");
                  if (summaryContent) {
                    summaryContent.innerHTML = "\u65E0\u6CD5\u627E\u5230\u6587\u7AE0\u5185\u5BB9\u5143\u7D20\uFF0C\u8BF7\u68C0\u67E5\u9009\u62E9\u5668\u914D\u7F6E\u3002";
                  }
                  return;
                }
                originalFetchSummary.call(this);
              } catch (error) {
                console.error("AI\u6458\u8981\u83B7\u53D6\u5931\u8D25:", error);
                const summaryContent = document.getElementById("ai-summary-content");
                if (summaryContent) {
                  summaryContent.innerHTML = "\u65E0\u6CD5\u8FDE\u63A5\u5230AI\u6458\u8981\u670D\u52A1\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u6216\u7A0D\u540E\u518D\u8BD5\u3002";
                }
              }
            };
            window.AISummary.init(window.aiConfig);
            console.log("AI\u6458\u8981\u521D\u59CB\u5316\u5B8C\u6210");
          } else {
            console.log("\u5F53\u524D\u9875\u9762\u4E0D\u7B26\u5408AI\u6458\u8981\u8DEF\u5F84\u89C4\u5219\uFF0C\u8DF3\u8FC7\u521D\u59CB\u5316");
          }
        } else {
          console.error("AISummary\u672A\u5B9A\u4E49\uFF0C\u8BF7\u68C0\u67E5ai-summary.js\u662F\u5426\u6B63\u786E\u52A0\u8F7D");
          const script = document.createElement("script");
          script.src = "/js/ai-summary.js";
          script.onload = () => {
            console.log("AI\u6458\u8981\u811A\u672C\u5DF2\u624B\u52A8\u52A0\u8F7D\uFF0C\u91CD\u65B0\u5C1D\u8BD5\u521D\u59CB\u5316");
            this.initAISummary();
          };
          script.onerror = () => {
            console.error("\u65E0\u6CD5\u52A0\u8F7DAI\u6458\u8981\u811A\u672C\uFF0C\u8BF7\u68C0\u67E5\u6587\u4EF6\u8DEF\u5F84");
          };
          document.head.appendChild(script);
        }
      }, 1e3);
      return this;
    }
    /**
     * initialize
     * @returns {FixItBlog}
     */
    init() {
      this.hello();
      this.setupLanguage();
      this.initAISummary();
      return this;
    }
  };
  (() => {
    window.fixitBlog = new FixItBlog();
    document.addEventListener("DOMContentLoaded", () => {
      window.fixitBlog.init();
    });
  })();
  console.log("\u5F53\u524D\u8BED\u8A00:", isEnglish ? "en" : "zh-cn");
  console.log("\u5F53\u524D\u8DEF\u5F84:", location.pathname);
  console.log("\u662F\u5426\u5339\u914D\u8DEF\u5F84\u89C4\u5219:", /\/posts\//.test(location.pathname));
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiPHN0ZGluPiJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXHJcbiAqIEN1c3RvbSBKYXZhU2NyaXB0IGZvciBGaXhJdCBibG9nIHNpdGUuXHJcbiAqIEBhdXRob3IgQExydWloYW8gaHR0cHM6Ly9scnVpaGFvLmNuXHJcbiAqL1xyXG5jbGFzcyBGaXhJdEJsb2cge1xyXG4gIC8qKlxyXG4gICAqIHNheSBoZWxsb1xyXG4gICAqIHlvdSBjYW4gZGVmaW5lIHlvdXIgb3duIGZ1bmN0aW9ucyBiZWxvd1xyXG4gICAqIEByZXR1cm5zIHtGaXhJdEJsb2d9XHJcbiAgICovXHJcbiAgaGVsbG8oKSB7XHJcbiAgICBjb25zb2xlLmxvZygnY3VzdG9tLmpzOiBIZWxsbyBGaXhJdCEnKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHU2OEMwXHU2RDRCXHU1RjUzXHU1MjREXHU4QkVEXHU4QTAwXHU1RTc2XHU4QkJFXHU3RjZFXHU3NkY4XHU1RTk0XHU3Njg0XHU3NTRDXHU5NzYyXHU1MTQzXHU3RDIwXHJcbiAgICogQHJldHVybnMge0ZpeEl0QmxvZ31cclxuICAgKi9cclxuICBzZXR1cExhbmd1YWdlKCkge1xyXG4gICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREVVJMXHU4REVGXHU1Rjg0XHJcbiAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xyXG4gICAgLy8gXHU2OEMwXHU2RDRCVVJMXHU0RTJEXHU2NjJGXHU1NDI2XHU1MzA1XHU1NDJCXHU4QkVEXHU4QTAwXHU0RUUzXHU3ODAxXHJcbiAgICBjb25zdCBpc0VuZ2xpc2ggPSBwYXRoLmluY2x1ZGVzKCcvZW4vJyk7XHJcbiAgICBjb25zdCBpc0NoaW5lc2UgPSBwYXRoLmluY2x1ZGVzKCcvemgtY24vJykgfHwgKCFpc0VuZ2xpc2ggJiYgIXBhdGguaW5jbHVkZXMoJy8nKSk7XHJcbiAgICBcclxuICAgIC8vIFx1NjgzOVx1NjM2RVx1NUY1M1x1NTI0RFx1OEJFRFx1OEEwMFx1OEJCRVx1N0Y2RVx1OTg3NVx1OTc2Mlx1NTE0M1x1N0QyMFxyXG4gICAgaWYgKGlzRW5nbGlzaCkge1xyXG4gICAgICAvLyBcdTgyRjFcdTY1ODdcdTczQUZcdTU4ODNcdTRFMEJcdTc2ODRcdTU5MDRcdTc0MDZcclxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSAnZW4nO1xyXG4gICAgICAvLyBcdTU5MDRcdTc0MDZcdTUzRUZcdTgwRkRcdTY3MkFcdTg4QUJIdWdvXHU4MUVBXHU1MkE4XHU3RkZCXHU4QkQxXHU3Njg0XHU1MTQzXHU3RDIwXHJcbiAgICAgIHRoaXMudHJhbnNsYXRlRWxlbWVudHMoJ2VuJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBcdTRFMkRcdTY1ODdcdTczQUZcdTU4ODNcdTRFMEJcdTc2ODRcdTU5MDRcdTc0MDZcclxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSAnemgtQ04nO1xyXG4gICAgICAvLyBcdTU5MDRcdTc0MDZcdTUzRUZcdTgwRkRcdTY3MkFcdTg4QUJIdWdvXHU4MUVBXHU1MkE4XHU3RkZCXHU4QkQxXHU3Njg0XHU1MTQzXHU3RDIwXHJcbiAgICAgIHRoaXMudHJhbnNsYXRlRWxlbWVudHMoJ3poLWNuJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHU3RkZCXHU4QkQxXHU5ODc1XHU5NzYyXHU0RTBBXHU3Njg0XHU3Mjc5XHU1QjlBXHU1MTQzXHU3RDIwXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmcgLSBcdThCRURcdThBMDBcdTRFRTNcdTc4MDEgKCdlbicgXHU2MjE2ICd6aC1jbicpXHJcbiAgICogQHJldHVybnMge0ZpeEl0QmxvZ31cclxuICAgKi9cclxuICB0cmFuc2xhdGVFbGVtZW50cyhsYW5nKSB7XHJcbiAgICAvLyBcdTVCOUFcdTRFNDlcdTdGRkJcdThCRDFcdTVCNTdcdTUxNzhcclxuICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IHtcclxuICAgICAgJ2VuJzoge1xyXG4gICAgICAgICdhcmNoaXZlcyc6ICdBcmNoaXZlcycsXHJcbiAgICAgICAgJ3RhZ3MnOiAnVGFncycsXHJcbiAgICAgICAgJ2NhdGVnb3JpZXMnOiAnQ2F0ZWdvcmllcycsXHJcbiAgICAgICAgJ3NlYXJjaCc6ICdTZWFyY2gnLFxyXG4gICAgICAgICdtZW51JzogJ01lbnUnLFxyXG4gICAgICAgICdob21lJzogJ0hvbWUnLFxyXG4gICAgICAgICdwb3N0cyc6ICdQb3N0cycsXHJcbiAgICAgICAgJ2FpLXN1bW1hcnknOiAnQXJ0aWNsZSBTdW1tYXJ5JyAvLyBcdTZERkJcdTUyQTBcdThGRDlcdTRFMDBcdTg4NENcclxuICAgICAgICAvLyBcdTUzRUZcdTRFRTVcdTY4MzlcdTYzNkVcdTk3MDBcdTg5ODFcdTZERkJcdTUyQTBcdTY2RjRcdTU5MUFcdTdGRkJcdThCRDFcclxuICAgICAgfSxcclxuICAgICAgJ3poLWNuJzoge1xyXG4gICAgICAgICdhcmNoaXZlcyc6ICdcdTVGNTJcdTY4NjMnLFxyXG4gICAgICAgICd0YWdzJzogJ1x1NjgwN1x1N0I3RScsXHJcbiAgICAgICAgJ2NhdGVnb3JpZXMnOiAnXHU1MjA2XHU3QzdCJyxcclxuICAgICAgICAnc2VhcmNoJzogJ1x1NjQxQ1x1N0QyMicsXHJcbiAgICAgICAgJ21lbnUnOiAnXHU4M0RDXHU1MzU1JyxcclxuICAgICAgICAnaG9tZSc6ICdcdTk5OTZcdTk4NzUnLFxyXG4gICAgICAgICdwb3N0cyc6ICdcdTY1ODdcdTdBRTAnLFxyXG4gICAgICAgICdhaS1zdW1tYXJ5JzogJ1x1NjU4N1x1N0FFMFx1NjQ1OFx1ODk4MScgLy8gXHU2REZCXHU1MkEwXHU4RkQ5XHU0RTAwXHU4ODRDXHJcbiAgICAgICAgLy8gXHU1M0VGXHU0RUU1XHU2ODM5XHU2MzZFXHU5NzAwXHU4OTgxXHU2REZCXHU1MkEwXHU2NkY0XHU1OTFBXHU3RkZCXHU4QkQxXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdThCRURcdThBMDBcdTc2ODRcdTdGRkJcdThCRDFcdTVCNTdcdTUxNzhcclxuICAgIGNvbnN0IGRpY3QgPSB0cmFuc2xhdGlvbnNbbGFuZ10gfHwgdHJhbnNsYXRpb25zWyd6aC1jbiddO1xyXG4gIFxyXG4gICAgLy8gXHU2N0U1XHU2MjdFXHU5ODc1XHU5NzYyXHU0RTBBXHU1M0VGXHU4MEZEXHU5NzAwXHU4OTgxXHU2MjRCXHU1MkE4XHU3RkZCXHU4QkQxXHU3Njg0XHU1MTQzXHU3RDIwXHJcbiAgICAvLyBcdThGRDlcdTkxQ0NcdTRFM0JcdTg5ODFcdTU5MDRcdTc0MDZcdTkwQTNcdTRFOUJcdTUzRUZcdTgwRkRcdTZDQTFcdTY3MDlcdTg4QUJIdWdvXHU4MUVBXHU1MkE4XHU3RkZCXHU4QkQxXHU3Njg0XHU1MTQzXHU3RDIwXHJcbiAgICAvLyBcdTRGOEJcdTU5ODJcdTkwMUFcdThGQzdKYXZhU2NyaXB0XHU1MkE4XHU2MDAxXHU2REZCXHU1MkEwXHU3Njg0XHU1MTQzXHU3RDIwXHJcbiAgICBcclxuICAgIC8vIFx1NzkzQVx1NEY4Qlx1RkYxQVx1N0ZGQlx1OEJEMVx1NTE3N1x1NjcwOVx1NzI3OVx1NUI5QWRhdGEtaTE4blx1NUM1RVx1NjAyN1x1NzY4NFx1NTE0M1x1N0QyMFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtaTE4bl0nKS5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWkxOG4nKTtcclxuICAgICAgaWYgKGRpY3Rba2V5XSkge1xyXG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gZGljdFtrZXldO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBcdTc5M0FcdTRGOEJcdUZGMUFcdTU5MDRcdTc0MDZcdTY0MUNcdTdEMjJcdTY4NDZcdTUzNjBcdTRGNERcdTdCMjZcclxuICAgIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1pbnB1dCcpO1xyXG4gICAgaWYgKHNlYXJjaElucHV0ICYmIGRpY3RbJ3NlYXJjaCddKSB7XHJcbiAgICAgIHNlYXJjaElucHV0LnBsYWNlaG9sZGVyID0gZGljdFsnc2VhcmNoJ10gKyAnLi4uJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTdGRkJcdThCRDFBSVx1NjQ1OFx1ODk4MVx1NTE0M1x1N0QyMFxyXG4gICAgY29uc3QgYWlTdW1tYXJ5VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWktc3VtbWFyeS10aXRsZScpO1xyXG4gICAgaWYgKGFpU3VtbWFyeVRpdGxlICYmIGRpY3RbJ2FpLXN1bW1hcnknXSkge1xyXG4gICAgICBhaVN1bW1hcnlUaXRsZS50ZXh0Q29udGVudCA9IGRpY3RbJ2FpLXN1bW1hcnknXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFx1NTIxRFx1NTlDQlx1NTMxNkFJXHU2NDU4XHU4OTgxXHU1MjlGXHU4MEZEXHJcbiAgICogQHJldHVybnMge0ZpeEl0QmxvZ31cclxuICAgKi9cclxuICBpbml0QUlTdW1tYXJ5KCkge1xyXG4gICAgLy8gXHU1RUY2XHU4RkRGXHU1MjFEXHU1OUNCXHU1MzE2XHVGRjBDXHU3ODZFXHU0RkREYWktc3VtbWFyeS5qc1x1NURGMlx1NTJBMFx1OEY3RFxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93LkFJU3VtbWFyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBcdTkxNERcdTdGNkVBSVx1NjQ1OFx1ODk4MVxyXG4gICAgICAgIC8vIFx1NjgzOVx1NjM2RVx1OEJFRFx1OEEwMFx1OTAwOVx1NjJFOVx1NEUwRFx1NTQwQ1x1NzY4NEFQSVx1N0FFRlx1NzBCOVxyXG4gICAgICAgIGNvbnN0IGlzRW5nbGlzaCA9IGxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKCcvZW4vJyk7XHJcbiAgICAgICAgd2luZG93LmFpQ29uZmlnLmFpQXBpID0gaXNFbmdsaXNoIFxyXG4gICAgICAgICAgPyBcImh0dHBzOi8vYWktc3VtbWFyeS54eXotbGl1MTUud29ya2Vycy5kZXZcIiBcclxuICAgICAgICAgIDogXCJodHRwczovL3F3LmdlZWtzd2cudG9wXCI7IC8vIFx1NEY3Rlx1NzUyOFx1NjBBOFx1NEU0Qlx1NTI0RFx1NjNEMFx1NTIzMFx1NzY4NFx1NTkwN1x1NzUyOEFQSVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NEZFRVx1NjUzOVx1NTQwRVx1RkYxQVxyXG4gICAgICAgIC8vIFx1NjI0MFx1NjcwOVx1OEJFRFx1OEEwMFx1NzI0OFx1NjcyQ1x1NEY3Rlx1NzUyOFx1NzZGOFx1NTQwQ1x1NzY4NEFQSVxyXG4gICAgICAgIHdpbmRvdy5haUNvbmZpZy5haUFwaSA9IFwiaHR0cHM6Ly9haS1zdW1tYXJ5Lnh5ei1saXUxNS53b3JrZXJzLmRldlwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NUMxRFx1OEJENVx1NTkxQVx1NEUyQVx1NTNFRlx1ODBGRFx1NzY4NFx1OTAwOVx1NjJFOVx1NTY2OFxyXG4gICAgICAgIGNvbnN0IHNlbGVjdG9ycyA9IFsnYXJ0aWNsZScsICcuc2luZ2xlIC5jb250ZW50JywgJyNjb250ZW50LXdyYXBwZXInLCAnLmNvbnRlbnQnLCAnbWFpbiddO1xyXG4gICAgICAgIGxldCBmb3VuZFNlbGVjdG9yID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChjb25zdCBzZWxlY3RvciBvZiBzZWxlY3RvcnMpIHtcclxuICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuYWlDb25maWcuYWlTZWxlY3RvciA9IHNlbGVjdG9yO1xyXG4gICAgICAgICAgICBmb3VuZFNlbGVjdG9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjI3RVx1NTIzMFx1NjcwOVx1NjU0OFx1OTAwOVx1NjJFOVx1NTY2ODonLCBzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoIWZvdW5kU2VsZWN0b3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybignXHU2NzJBXHU2MjdFXHU1MjMwXHU2NzA5XHU2NTQ4XHU3Njg0XHU1MTg1XHU1QkI5XHU5MDA5XHU2MkU5XHU1NjY4XHVGRjBDXHU0RjdGXHU3NTI4XHU5RUQ4XHU4QkE0XHU1MDNDJyk7XHJcbiAgICAgICAgICB3aW5kb3cuYWlDb25maWcuYWlTZWxlY3RvciA9ICdhcnRpY2xlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgd2luZG93LmFpQ29uZmlnLnJlcG9ydFVybCA9IFwibWFpbHRvOnh5ei5saXUxNUBnbWFpbC5jb20/c3ViamVjdD1cdTY1ODdcdTdBRTBcdTY0NThcdTg5ODFcdTYyOTVcdThCQzkmYm9keT1cdTYyOTVcdThCQzlcdTdGNTFcdTU3NDBcdUZGMUE9XCIrbG9jYXRpb24uaHJlZjtcclxuICAgICAgICAvLyBcdTRGRUVcdTY1MzlcdThERUZcdTVGODRcdTUzMzlcdTkxNERcdTg5QzRcdTUyMTlcdUZGMENcdTRGN0ZcdTUxNzZcdTgwRkRcdTUzMzlcdTkxNERcdTU5MUFcdThCRURcdThBMDBcdThERUZcdTVGODRcclxuICAgICAgICB3aW5kb3cuYWlDb25maWcuZW5hYmxlQUlQYXRoUmVnZXggPSAvXFwvcG9zdHNcXC8vOyAvLyBcdTUzRUFcdTg5ODFcdThERUZcdTVGODRcdTRFMkRcdTUzMDVcdTU0MkIvcG9zdHMvXHU1QzMxXHU1MzM5XHU5MTREXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU4REVGXHU1Rjg0XHU2NjJGXHU1NDI2XHU1MzM5XHU5MTREXHJcbiAgICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSB3aW5kb3cuYWlDb25maWcuZW5hYmxlQUlQYXRoUmVnZXgudGVzdChsb2NhdGlvbi5wYXRobmFtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1OERFRlx1NUY4NDonLCBsb2NhdGlvbi5wYXRobmFtZSwgJ1x1NjYyRlx1NTQyNlx1NTMzOVx1OTE0RDonLCBwYXRoTWF0Y2hlcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHBhdGhNYXRjaGVzKSB7XHJcbiAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTk1MTlcdThCRUZcdTU5MDRcdTc0MDZcclxuICAgICAgICAgIC8vIFx1NjZGRlx1NjM2Mlx1NzNCMFx1NjcwOVx1NzY4NGZldGNoU3VtbWFyeVx1OTFDRFx1NTE5OVx1NEVFM1x1NzgwMVxyXG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxGZXRjaFN1bW1hcnkgPSB3aW5kb3cuQUlTdW1tYXJ5LmZldGNoU3VtbWFyeTtcclxuICAgICAgICAgIHdpbmRvdy5BSVN1bW1hcnkuZmV0Y2hTdW1tYXJ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUYwMFx1NTlDQlx1ODNCN1x1NTNENkFJXHU2NDU4XHU4OTgxXHVGRjBDXHU4QkVEXHU4QTAwOicsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nKTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1MTg1XHU1QkI5XHU5MDA5XHU2MkU5XHU1NjY4OicsIHRoaXMuY29uZmlnLmFpU2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBUElcdTU3MzBcdTU3NDA6JywgdGhpcy5jb25maWcuYWlBcGkpO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NTE4NVx1NUJCOVx1NTE0M1x1N0QyMFxyXG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmNvbmZpZy5haVNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICBpZiAoIWNvbnRlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTUxODVcdTVCQjlcdTUxNDNcdTdEMjA6JywgdGhpcy5jb25maWcuYWlTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5Q29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaS1zdW1tYXJ5LWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdW1tYXJ5Q29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICBzdW1tYXJ5Q29udGVudC5pbm5lckhUTUwgPSAnXHU2NUUwXHU2Q0Q1XHU2MjdFXHU1MjMwXHU2NTg3XHU3QUUwXHU1MTg1XHU1QkI5XHU1MTQzXHU3RDIwXHVGRjBDXHU4QkY3XHU2OEMwXHU2N0U1XHU5MDA5XHU2MkU5XHU1NjY4XHU5MTREXHU3RjZFXHUzMDAyJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgb3JpZ2luYWxGZXRjaFN1bW1hcnkuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBSVx1NjQ1OFx1ODk4MVx1ODNCN1x1NTNENlx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeUNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWktc3VtbWFyeS1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgICAgaWYgKHN1bW1hcnlDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzdW1tYXJ5Q29udGVudC5pbm5lckhUTUwgPSAnXHU2NUUwXHU2Q0Q1XHU4RkRFXHU2M0E1XHU1MjMwQUlcdTY0NThcdTg5ODFcdTY3MERcdTUyQTFcdUZGMENcdThCRjdcdTY4QzBcdTY3RTVcdTdGNTFcdTdFRENcdThGREVcdTYzQTVcdTYyMTZcdTdBMERcdTU0MEVcdTUxOERcdThCRDVcdTMwMDInO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gXHU1MjFEXHU1OUNCXHU1MzE2QUlcdTY0NThcdTg5ODFcclxuICAgICAgICAgIHdpbmRvdy5BSVN1bW1hcnkuaW5pdCh3aW5kb3cuYWlDb25maWcpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0FJXHU2NDU4XHU4OTgxXHU1MjFEXHU1OUNCXHU1MzE2XHU1QjhDXHU2MjEwJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVGNTNcdTUyNERcdTk4NzVcdTk3NjJcdTRFMERcdTdCMjZcdTU0MDhBSVx1NjQ1OFx1ODk4MVx1OERFRlx1NUY4NFx1ODlDNFx1NTIxOVx1RkYwQ1x1OERGM1x1OEZDN1x1NTIxRFx1NTlDQlx1NTMxNicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdBSVN1bW1hcnlcdTY3MkFcdTVCOUFcdTRFNDlcdUZGMENcdThCRjdcdTY4QzBcdTY3RTVhaS1zdW1tYXJ5LmpzXHU2NjJGXHU1NDI2XHU2QjYzXHU3ODZFXHU1MkEwXHU4RjdEJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1QzFEXHU4QkQ1XHU2MjRCXHU1MkE4XHU1MkEwXHU4RjdEXHU4MTFBXHU2NzJDXHJcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgc2NyaXB0LnNyYyA9ICcvanMvYWktc3VtbWFyeS5qcyc7XHJcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdBSVx1NjQ1OFx1ODk4MVx1ODExQVx1NjcyQ1x1NURGMlx1NjI0Qlx1NTJBOFx1NTJBMFx1OEY3RFx1RkYwQ1x1OTFDRFx1NjVCMFx1NUMxRFx1OEJENVx1NTIxRFx1NTlDQlx1NTMxNicpO1xyXG4gICAgICAgICAgdGhpcy5pbml0QUlTdW1tYXJ5KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NjVFMFx1NkNENVx1NTJBMFx1OEY3REFJXHU2NDU4XHU4OTgxXHU4MTFBXHU2NzJDXHVGRjBDXHU4QkY3XHU2OEMwXHU2N0U1XHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0Jyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMDApOyAvLyBcdTVFRjZcdThGREYxXHU3OUQyXHU2MjY3XHU4ODRDXHVGRjBDXHU3ODZFXHU0RkREXHU1MTc2XHU0RUQ2XHU4MTFBXHU2NzJDXHU1REYyXHU1MkEwXHU4RjdEXHJcbiAgICBcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaW5pdGlhbGl6ZVxyXG4gICAqIEByZXR1cm5zIHtGaXhJdEJsb2d9XHJcbiAgICovXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuaGVsbG8oKTtcclxuICAgIHRoaXMuc2V0dXBMYW5ndWFnZSgpO1xyXG4gICAgdGhpcy5pbml0QUlTdW1tYXJ5KCk7IC8vIFx1NkRGQlx1NTJBMFx1OEZEOVx1NEUwMFx1ODg0Q1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogaW1tZWRpYXRlIGV4ZWN1dGlvblxyXG4gKi9cclxuKCgpID0+IHtcclxuICB3aW5kb3cuZml4aXRCbG9nID0gbmV3IEZpeEl0QmxvZygpO1xyXG4gIC8vIGl0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgRE9NIHRyZWUgaXMgYnVpbHRcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgd2luZG93LmZpeGl0QmxvZy5pbml0KCk7XHJcbiAgfSk7XHJcbn0pKCk7XHJcbi8vIFx1NTcyOGluaXRBSVN1bW1hcnlcdTY1QjlcdTZDRDVcdTRFMkRcdTZERkJcdTUyQTBcclxuY29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1OEJFRFx1OEEwMDonLCBpc0VuZ2xpc2ggPyAnZW4nIDogJ3poLWNuJyk7XHJcbmNvbnNvbGUubG9nKCdcdTVGNTNcdTUyNERcdThERUZcdTVGODQ6JywgbG9jYXRpb24ucGF0aG5hbWUpO1xyXG5jb25zb2xlLmxvZygnXHU2NjJGXHU1NDI2XHU1MzM5XHU5MTREXHU4REVGXHU1Rjg0XHU4OUM0XHU1MjE5OicsIC9cXC9wb3N0c1xcLy8udGVzdChsb2NhdGlvbi5wYXRobmFtZSkpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiOztBQUlBLE1BQU0sWUFBTixNQUFnQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1kLFFBQVE7QUFDTixjQUFRLElBQUkseUJBQXlCO0FBQ3JDLGFBQU87QUFBQSxJQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLGdCQUFnQjtBQUVkLFlBQU0sT0FBTyxPQUFPLFNBQVM7QUFFN0IsWUFBTUEsYUFBWSxLQUFLLFNBQVMsTUFBTTtBQUN0QyxZQUFNLFlBQVksS0FBSyxTQUFTLFNBQVMsS0FBTSxDQUFDQSxjQUFhLENBQUMsS0FBSyxTQUFTLEdBQUc7QUFHL0UsVUFBSUEsWUFBVztBQUViLGlCQUFTLGdCQUFnQixPQUFPO0FBRWhDLGFBQUssa0JB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QU0sK0NBQVksS0FBSyxPQUFPLFVBQVU7QUFDaEQsd0JBQU0saUJBQWlCLFNBQVMsZUFBZSxvQkFBb0I7QUFDbkUsc0JBQUksZ0JBQWdCO0FBQ2xCLG1DQUFlLFlBQVk7QUFBQSxrQkFDN0I7QUFDQTtBQUFBLGdCQUNGO0FBRUEscUNBQXFCLEtBQUssSUFBSTtBQUFBLGNBQ2hDLFNBQVMsT0FBTztBQUNkLHdCQUFRLE1BQU0sMkNBQWEsS0FBSztBQUNoQyxzQkFBTSxpQkFBaUIsU0FBUyxlQUFlLG9CQUFvQjtBQUNuRSxvQkFBSSxnQkFBZ0I7QUFDbEIsaUNBQWUsWUFBWTtBQUFBLGdCQUM3QjtBQUFBLGNBQ0Y7QUFBQSxZQUNGO0FBR0EsbUJBQU8sVUFBVSxLQUFLLE9BQU8sUUFBUTtBQUNyQyxvQkFBUSxJQUFJLDhDQUFXO0FBQUEsVUFDekIsT0FBTztBQUNMLG9CQUFRLElBQUksc0hBQXVCO0FBQUEsVUFDckM7QUFBQSxRQUNGLE9BQU87QUFDTCxrQkFBUSxNQUFNLHNHQUFxQztBQUduRCxnQkFBTSxTQUFTLFNBQVMsY0FBYyxRQUFRO0FBQzlDLGlCQUFPLE1BQU07QUFDYixpQkFBTyxTQUFTLE1BQU07QUFDcEIsb0JBQVEsSUFBSSwwR0FBcUI7QUFDakMsaUJBQUssY0FBYztBQUFBLFVBQ3JCO0FBQ0EsaUJBQU8sVUFBVSxNQUFNO0FBQ3JCLG9CQUFRLE1BQU0sb0dBQW9CO0FBQUEsVUFDcEM7QUFDQSxtQkFBUyxLQUFLLFlBQVksTUFBTTtBQUFBLFFBQ2xDO0FBQUEsTUFDRixHQUFHLEdBQUk7QUFFUCxhQUFPO0FBQUEsSUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNQSxPQUFPO0FBQ0wsV0FBSyxNQUFNO0FBQ1gsV0FBSyxjQUFjO0FBQ25CLFdBQUssY0FBYztBQUNuQixhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFLQSxHQUFDLE1BQU07QUFDTCxXQUFPLFlBQVksSUFBSSxVQUFVO0FBRWpDLGFBQVMsaUJBQWlCLG9CQUFvQixNQUFNO0FBQ2xELGFBQU8sVUFBVSxLQUFLO0FBQUEsSUFDeEIsQ0FBQztBQUFBLEVBQ0gsR0FBRztBQUVILFVBQVEsSUFBSSw2QkFBUyxZQUFZLE9BQU8sT0FBTztBQUMvQyxVQUFRLElBQUksNkJBQVMsU0FBUyxRQUFRO0FBQ3RDLFVBQVEsSUFBSSxxREFBYSxZQUFZLEtBQUssU0FBUyxRQUFRLENBQUM7IiwKICAibmFtZXMiOiBbImlzRW5nbGlzaCJdCn0K
